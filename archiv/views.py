# generated by appcreator
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.urls import reverse_lazy
from django.views.generic.edit import DeleteView
from .filters import (
    ArtWorkListFilter,
    BookListFilter,
    InstitutionListFilter,
    PersonListFilter,
    TextListFilter,
)
from .forms import (
    ArtWorkForm,
    ArtWorkFilterFormHelper,
    BookForm,
    BookFilterFormHelper,
    InstitutionForm,
    InstitutionFilterFormHelper,
    PersonForm,
    PersonFilterFormHelper,
    TextForm,
    TextFilterFormHelper,
)
from .tables import (
    ArtWorkTable,
    BookTable,
    InstitutionTable,
    PersonTable,
    TextTable,
)
from .models import (
    ArtWork,
    Book,
    Institution,
    Person,
    Text,
)
from browsing.browsing_utils import (
    GenericListView,
    BaseCreateView,
    BaseUpdateView,
    BaseDetailView,
)


class ArtWorkListView(GenericListView):

    model = ArtWork
    filter_class = ArtWorkListFilter
    formhelper_class = ArtWorkFilterFormHelper
    table_class = ArtWorkTable
    init_columns = [
        "id",
        "name",
    ]
    enable_merge = True
    template_name = "archiv/generic_list.html"


class ArtWorkDetailView(BaseDetailView):

    model = ArtWork
    template_name = "archiv/generic_detail.html"


class ArtWorkCreate(BaseCreateView):

    model = ArtWork
    form_class = ArtWorkForm
    template_name = "archiv/create_base_template.html"

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArtWorkCreate, self).dispatch(*args, **kwargs)


class ArtWorkUpdate(BaseUpdateView):

    model = ArtWork
    form_class = ArtWorkForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArtWorkUpdate, self).dispatch(*args, **kwargs)


class ArtWorkDelete(DeleteView):
    model = ArtWork
    template_name = "webpage/confirm_delete.html"
    success_url = reverse_lazy("archiv:artwork_browse")

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArtWorkDelete, self).dispatch(*args, **kwargs)


class BookListView(GenericListView):

    model = Book
    filter_class = BookListFilter
    formhelper_class = BookFilterFormHelper
    table_class = BookTable
    init_columns = [
        "id",
        "legacy_pk",
    ]
    enable_merge = True
    template_name = "archiv/generic_list.html"


class BookDetailView(BaseDetailView):

    model = Book
    template_name = "archiv/generic_detail.html"


class BookCreate(BaseCreateView):

    model = Book
    form_class = BookForm
    template_name = "archiv/create_base_template.html"

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(BookCreate, self).dispatch(*args, **kwargs)


class BookUpdate(BaseUpdateView):

    model = Book
    form_class = BookForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(BookUpdate, self).dispatch(*args, **kwargs)


class BookDelete(DeleteView):
    model = Book
    template_name = "webpage/confirm_delete.html"
    success_url = reverse_lazy("archiv:book_browse")

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(BookDelete, self).dispatch(*args, **kwargs)


class InstitutionListView(GenericListView):

    model = Institution
    filter_class = InstitutionListFilter
    formhelper_class = InstitutionFilterFormHelper
    table_class = InstitutionTable
    init_columns = [
        "id",
        "name",
    ]
    enable_merge = True
    template_name = "archiv/generic_list.html"


class InstitutionDetailView(BaseDetailView):

    model = Institution
    template_name = "archiv/generic_detail.html"


class InstitutionCreate(BaseCreateView):

    model = Institution
    form_class = InstitutionForm
    template_name = "archiv/create_base_template.html"

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(InstitutionCreate, self).dispatch(*args, **kwargs)


class InstitutionUpdate(BaseUpdateView):

    model = Institution
    form_class = InstitutionForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(InstitutionUpdate, self).dispatch(*args, **kwargs)


class InstitutionDelete(DeleteView):
    model = Institution
    template_name = "webpage/confirm_delete.html"
    success_url = reverse_lazy("archiv:institution_browse")

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(InstitutionDelete, self).dispatch(*args, **kwargs)


class PersonListView(GenericListView):

    model = Person
    filter_class = PersonListFilter
    formhelper_class = PersonFilterFormHelper
    table_class = PersonTable
    init_columns = [
        "id",
        "name",
    ]
    enable_merge = True
    template_name = "archiv/generic_list.html"


class PersonDetailView(BaseDetailView):

    model = Person
    template_name = "archiv/generic_detail.html"


class PersonCreate(BaseCreateView):

    model = Person
    form_class = PersonForm
    template_name = "archiv/create_base_template.html"

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(PersonCreate, self).dispatch(*args, **kwargs)


class PersonUpdate(BaseUpdateView):

    model = Person
    form_class = PersonForm
    template_name = "archiv/create_base_template.html"

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(PersonUpdate, self).dispatch(*args, **kwargs)


class PersonDelete(DeleteView):
    model = Person
    template_name = "webpage/confirm_delete.html"
    success_url = reverse_lazy("archiv:person_browse")

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(PersonDelete, self).dispatch(*args, **kwargs)


class TextListView(GenericListView):

    model = Text
    filter_class = TextListFilter
    formhelper_class = TextFilterFormHelper
    table_class = TextTable
    init_columns = [
        "id",
        "legacy_pk",
    ]
    enable_merge = True
    template_name = "archiv/generic_list.html"


class TextDetailView(BaseDetailView):

    model = Text
    template_name = "archiv/generic_detail.html"


class TextCreate(BaseCreateView):

    model = Text
    form_class = TextForm
    template_name = "archiv/create_base_template.html"

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TextCreate, self).dispatch(*args, **kwargs)


class TextUpdate(BaseUpdateView):

    model = Text
    form_class = TextForm
    template_name = "archiv/create_base_template.html"

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TextUpdate, self).dispatch(*args, **kwargs)


class TextDelete(DeleteView):
    model = Text
    template_name = "webpage/confirm_delete.html"
    success_url = reverse_lazy("archiv:text_browse")

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TextDelete, self).dispatch(*args, **kwargs)
