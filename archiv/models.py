# generated by appcreator

from django.db import models
from django.urls import reverse
from next_prev import next_in_order, prev_in_order

from browsing.browsing_utils import model_to_dict


def set_extra(self, **kwargs):
    self.extra = kwargs
    return self


models.Field.set_extra = set_extra


class ArtWork(models.Model):
    """Beschreibt ein Kustwerk"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    legacy_pk = models.IntegerField(
        blank=True,
        null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=False,
        data_lookup="aid",
        arche_prop="hasNonLinkedIdentifier",
        arche_prop_str_template="Primärschlüssel Alt: <value>",
    )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Titel",
        help_text="Titel des Kunstwerkes",
    ).set_extra(
        is_public=True,
        data_lookup="aname",
        arche_prop="hasTitle",
    )
    alt_name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Alternative Bezeichnung",
        help_text="Alternative Bezeichnung",
    ).set_extra(
        is_public=True,
        data_lookup="aspelling",
        arche_prop="hasAlternativeTitle",
    )
    written_date = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Datierung",
        help_text="Datierung",
    ).set_extra(
        is_public=True,
        data_lookup="ayear",
    )
    part_of = models.ForeignKey(
        "ArtWork",
        related_name="rvn_artwork_part_of_artwork",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Teil von",
        help_text="Teil von",
    ).set_extra(
        is_public=True,
        data_lookup="aparent",
    )
    material = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Material",
        help_text="Material",
    ).set_extra(
        is_public=True,
        data_lookup="material",
    )
    dimensions = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Dimensionen",
        help_text="Dimensionen",
    ).set_extra(
        is_public=True,
        data_lookup="adimensions",
        arche_prop="hasExtent",
        arche_prop_str_template="Dimensionen: <value>",
    )
    holding_institution = models.ForeignKey(
        "Institution",
        related_name="rvn_artwork_holding_institution_institution",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="in Museum",
        help_text="in Museum/Sammlung",
    ).set_extra(
        is_public=True,
        data_lookup="amuseum",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:

        ordering = [
            "name",
        ]
        verbose_name = "Kunstwerk"

    def __str__(self):
        if self.name:
            return f"{self.name}"
        else:
            return f"{self.id}"

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:artwork_browse")

    @classmethod
    def get_source_table(self):
        return "artworks"

    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:artwork_create")

    def get_absolute_url(self):
        return reverse("archiv:artwork_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:artwork_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:artwork_edit", kwargs={"pk": self.id})

    def get_next(self):
        try:
            next = next_in_order(self)
        except ValueError:
            next = False
        if next:
            return reverse("archiv:artwork_detail", kwargs={"pk": next.id})
        return False

    def get_prev(self):
        try:
            prev = prev_in_order(self)
        except ValueError:
            prev = False
        if prev:
            return reverse("archiv:artwork_detail", kwargs={"pk": prev.id})
        return False


class Book(models.Model):
    """Buch"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    legacy_pk = models.IntegerField(
        blank=True,
        null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=False,
        data_lookup="bid",
        arche_prop="hasNonLinkedIdentifier",
        arche_prop_str_template="Primärschlüssel Alt: <value>",
    )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Titel",
        help_text="Titel des Buches",
    ).set_extra(
        is_public=True,
        data_lookup="bname",
        arche_prop="hasTitle",
    )
    written_date = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Jahr",
        help_text="Jahr",
    ).set_extra(
        is_public=True,
        data_lookup="byear",
    )
    alt_written_date = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Jahr (2)",
        help_text="Jahr (2)",
    ).set_extra(
        is_public=True,
        data_lookup="byear2",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:

        ordering = [
            "legacy_pk",
        ]
        verbose_name = "Book"

    def __str__(self):
        if self.name:
            return f"{self.name}"
        else:
            return f"{self.id}"

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:book_browse")

    @classmethod
    def get_source_table(self):
        return "books"

    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:book_create")

    def get_absolute_url(self):
        return reverse("archiv:book_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:book_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:book_edit", kwargs={"pk": self.id})

    def get_next(self):
        try:
            next = next_in_order(self)
        except ValueError:
            next = False
        if next:
            return reverse("archiv:book_detail", kwargs={"pk": next.id})
        return False

    def get_prev(self):
        try:
            prev = prev_in_order(self)
        except ValueError:
            prev = False
        if prev:
            return reverse("archiv:book_detail", kwargs={"pk": prev.id})
        return False


class Institution(models.Model):
    """Institution"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name",
        help_text="Name",
    ).set_extra(
        is_public=True,
        arche_prop="hasTitle",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:

        ordering = [
            "name",
        ]
        verbose_name = "Institution"

    def __str__(self):
        if self.name:
            return f"{self.name}"
        else:
            return f"{self.id}"

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:institution_browse")

    @classmethod
    def get_source_table(self):
        return "Institution"

    @classmethod
    def get_natural_primary_key(self):
        return "name"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:institution_create")

    def get_absolute_url(self):
        return reverse("archiv:institution_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:institution_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:institution_edit", kwargs={"pk": self.id})

    def get_next(self):
        try:
            next = next_in_order(self)
        except ValueError:
            next = False
        if next:
            return reverse("archiv:institution_detail", kwargs={"pk": next.id})
        return False

    def get_prev(self):
        try:
            prev = prev_in_order(self)
        except ValueError:
            prev = False
        if prev:
            return reverse("archiv:institution_detail", kwargs={"pk": prev.id})
        return False


class Person(models.Model):
    """Person"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    legacy_pk = models.IntegerField(
        blank=True,
        null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=False,
        data_lookup="pid",
        arche_prop="hasNonLinkedIdentifier",
        arche_prop_str_template="Primärschlüssel Alt: <value>",
    )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name",
        help_text="Titel des Kunstwerkes",
    ).set_extra(
        is_public=True,
        data_lookup="pname",
        arche_prop="hasTitle",
    )
    alt_name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Alternative Bezeichnung",
        help_text="Alternative Bezeichnung",
    ).set_extra(
        is_public=True,
        data_lookup="pspelling",
        arche_prop="hasAlternativeTitle",
    )
    author_of = models.ManyToManyField(
        Book,
        blank=True,
        verbose_name="Autorin/Autor von",
        help_text="Autorin/Autor von",
        related_name="has_author",
    )
    painter_of = models.ManyToManyField(
        ArtWork,
        blank=True,
        verbose_name="Malerin/Maler von",
        help_text="Malerin/Maler von",
        related_name="has_painter",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:

        ordering = [
            "legacy_pk",
        ]
        verbose_name = "Person"

    def __str__(self):
        if self.name:
            return f"{self.name}"
        else:
            return f"{self.id}"

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:person_browse")

    @classmethod
    def get_source_table(self):
        return "people"

    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:person_create")

    def get_absolute_url(self):
        return reverse("archiv:person_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:person_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:person_edit", kwargs={"pk": self.id})

    def get_next(self):
        try:
            next = next_in_order(self)
        except ValueError:
            next = False
        if next:
            return reverse("archiv:person_detail", kwargs={"pk": next.id})
        return False

    def get_prev(self):
        try:
            prev = prev_in_order(self)
        except ValueError:
            prev = False
        if prev:
            return reverse("archiv:person_detail", kwargs={"pk": prev.id})
        return False


class Text(models.Model):
    """Text"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    legacy_pk = models.IntegerField(
        blank=True,
        null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=False,
        data_lookup="tid",
        arche_prop="hasNonLinkedIdentifier",
        arche_prop_str_template="Primärschlüssel Alt: <value>",
    )
    text = models.TextField(
        blank=True,
        null=True,
        verbose_name="Text",
        help_text="Text",
    ).set_extra(
        is_public=True,
        data_lookup="ttext",
    )
    source = models.TextField(
        blank=True,
        null=True,
        verbose_name="Quelle",
        help_text="Quelle",
    ).set_extra(
        is_public=True,
        data_lookup="tsource",
    )
    book = models.ForeignKey(
        "Book",
        related_name="rvn_text_book_book",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Buch",
        help_text="Buch",
    ).set_extra(
        is_public=True,
        data_lookup="bid",
    )
    mentioned_person = models.ManyToManyField(
        Person,
        blank=True,
        verbose_name="erwähnte Personen",
        help_text="im Text erwähnte Personen",
        related_name="person_mentioned_in",
    )
    mentioned_artwork = models.ManyToManyField(
        ArtWork,
        blank=True,
        verbose_name="erwähnte Kunstwerke",
        help_text="im Text erwähnte Kunstwerke",
        related_name="artwork_mentioned_in",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:

        ordering = [
            "id",
        ]
        verbose_name = "Text"

    def __str__(self):
        if self.source:
            return f"{self.source}"
        else:
            return f"Text {self.id}"

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:text_browse")

    @classmethod
    def get_source_table(self):
        return "texts"

    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:text_create")

    def get_absolute_url(self):
        return reverse("archiv:text_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:text_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:text_edit", kwargs={"pk": self.id})

    def get_next(self):
        try:
            next = next_in_order(self)
        except ValueError:
            next = False
        if next:
            return reverse("archiv:text_detail", kwargs={"pk": next.id})
        return False

    def get_prev(self):
        try:
            prev = prev_in_order(self)
        except ValueError:
            prev = False
        if prev:
            return reverse("archiv:text_detail", kwargs={"pk": prev.id})
        return False
