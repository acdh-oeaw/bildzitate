# generated by appcreator
import django_filters
from dal import autocomplete

try:
    from vocabs.models import SkosConcept
except ModuleNotFoundError:
    pass
from .models import (
    ArtWork,
    Book,
    Institution,
    Person,
    Text,
)


class ArtWorkListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=ArtWork._meta.get_field("legacy_id").help_text,
        label=ArtWork._meta.get_field("legacy_id").verbose_name,
    )
    name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=ArtWork._meta.get_field("name").help_text,
        label=ArtWork._meta.get_field("name").verbose_name,
    )
    alt_name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=ArtWork._meta.get_field("alt_name").help_text,
        label=ArtWork._meta.get_field("alt_name").verbose_name,
    )
    written_date = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=ArtWork._meta.get_field("written_date").help_text,
        label=ArtWork._meta.get_field("written_date").verbose_name,
    )
    part_of = django_filters.ModelMultipleChoiceFilter(
        queryset=ArtWork.objects.all(),
        help_text=ArtWork._meta.get_field("part_of").help_text,
        label=ArtWork._meta.get_field("part_of").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="archiv-ac:artwork-autocomplete",
        ),
    )
    material = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=ArtWork._meta.get_field("material").help_text,
        label=ArtWork._meta.get_field("material").verbose_name,
    )
    dimensions = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=ArtWork._meta.get_field("dimensions").help_text,
        label=ArtWork._meta.get_field("dimensions").verbose_name,
    )
    holding_institution = django_filters.ModelMultipleChoiceFilter(
        queryset=Institution.objects.all(),
        help_text=ArtWork._meta.get_field("holding_institution").help_text,
        label=ArtWork._meta.get_field("holding_institution").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="archiv-ac:institution-autocomplete",
        ),
    )

    class Meta:
        model = ArtWork
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "name",
            "alt_name",
            "written_date",
            "part_of",
            "material",
            "dimensions",
            "holding_institution",
        ]


class BookListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Book._meta.get_field("legacy_id").help_text,
        label=Book._meta.get_field("legacy_id").verbose_name,
    )
    name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Book._meta.get_field("name").help_text,
        label=Book._meta.get_field("name").verbose_name,
    )
    written_date = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Book._meta.get_field("written_date").help_text,
        label=Book._meta.get_field("written_date").verbose_name,
    )
    alt_written_date = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Book._meta.get_field("alt_written_date").help_text,
        label=Book._meta.get_field("alt_written_date").verbose_name,
    )

    class Meta:
        model = Book
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "name",
            "written_date",
            "alt_written_date",
        ]


class InstitutionListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Institution._meta.get_field("legacy_id").help_text,
        label=Institution._meta.get_field("legacy_id").verbose_name,
    )
    name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Institution._meta.get_field("name").help_text,
        label=Institution._meta.get_field("name").verbose_name,
    )

    class Meta:
        model = Institution
        fields = [
            "id",
            "legacy_id",
            "name",
        ]


class PersonListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Person._meta.get_field("legacy_id").help_text,
        label=Person._meta.get_field("legacy_id").verbose_name,
    )
    name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Person._meta.get_field("name").help_text,
        label=Person._meta.get_field("name").verbose_name,
    )
    alt_name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Person._meta.get_field("alt_name").help_text,
        label=Person._meta.get_field("alt_name").verbose_name,
    )

    class Meta:
        model = Person
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "name",
            "alt_name",
        ]


class TextListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Text._meta.get_field("legacy_id").help_text,
        label=Text._meta.get_field("legacy_id").verbose_name,
    )
    text = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Text._meta.get_field("text").help_text,
        label=Text._meta.get_field("text").verbose_name,
    )
    source = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Text._meta.get_field("source").help_text,
        label=Text._meta.get_field("source").verbose_name,
    )
    book = django_filters.ModelMultipleChoiceFilter(
        queryset=Book.objects.all(),
        help_text=Text._meta.get_field("book").help_text,
        label=Text._meta.get_field("book").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="archiv-ac:book-autocomplete",
        ),
    )

    class Meta:
        model = Text
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "text",
            "source",
            "book",
        ]
